/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package mongoDBreactive;

import com.mongodb.bulk.BulkWriteResult;
import com.mongodb.client.model.BulkWriteOptions;
import com.mongodb.client.model.DeleteOneModel;
import com.mongodb.client.model.InsertOneModel;
import com.mongodb.client.model.ReplaceOneModel;
import com.mongodb.client.model.UpdateOneModel;
import com.mongodb.client.model.WriteModel;
import com.mongodb.client.result.DeleteResult;
import com.mongodb.client.result.UpdateResult;
import com.mongodb.reactivestreams.client.MongoClient;
import com.mongodb.reactivestreams.client.MongoClients;
import com.mongodb.reactivestreams.client.MongoCollection;
import com.mongodb.reactivestreams.client.MongoDatabase;
import com.mongodb.reactivestreams.client.Success;
import org.bson.Document;
import org.reactivestreams.Publisher;
import org.reactivestreams.Subscriber;

import java.util.ArrayList;
import java.util.List;

import static com.mongodb.client.model.Filters.and;
import static com.mongodb.client.model.Filters.eq;
import static com.mongodb.client.model.Filters.exists;
import static com.mongodb.client.model.Filters.gt;
import static com.mongodb.client.model.Filters.gte;
import static com.mongodb.client.model.Filters.lt;
import static com.mongodb.client.model.Filters.lte;
import static com.mongodb.client.model.Projections.excludeId;
import static com.mongodb.client.model.Sorts.descending;
import static mongoDBreactive.SubscriberHelpers.ObservableSubscriber;
import static mongoDBreactive.SubscriberHelpers.OperationSubscriber;
import static mongoDBreactive.SubscriberHelpers.PrintDocumentSubscriber;
import static mongoDBreactive.SubscriberHelpers.PrintSubscriber;

public class App {
    public String getGreeting() {
        return "Hello world.";
    }

    public void Test()
    {
        // Create a publisher
        Publisher<Document> publisher = collection.find();

        // Non blocking
        publisher.subscribe(new PrintDocumentSubscriber());

        Subscriber<Document> subscriber = new PrintDocumentsSubscriber();
        publisher.subscribe(subscriber);
        subscriber.await(); // Block for the publisher to complete
    }

    public static void main(String[] args) {
        System.out.println(new App().getGreeting());
        App app = new App();
        app.Test();
    }
}
